# -*- coding: UTF-8 -*-

"""
    Implementation of unit tests for localization.py
"""

import unittest

import datetime

import localization as lo

#import teachmedijkstra

class TestLocalization(unittest.TestCase):

    def test_const_velocity(self):
        time = datetime.timedelta(seconds = 0)
        gps_err = [0.1, 0.1, 0.1]
        freq = 10 # Hz
        period = 1 / freq
        velocity = [1, 1, 0]
        num_steps = 10
        loc = lo.Localization(remember_history = True)
        xyz = [0, 0, 0]
        for k in range(num_steps):
            print('xyz:', xyz)
            loc.update_xyz_from_gps(time, xyz, gps_err = gps_err)
            xyz = [xyz[i] + period*velocity[i] for i in range(len(xyz))]
        loc.draw()
        print('xxx')

#    def testDirectedShortestPathTree(self):
#        graph = teachmedijkstra.DirectedGraph()
#        graph.addVertex("a", (0,2))
#        graph.addVertex("b", (1,2))
#        graph.addVertex("c", (2,2))
#        graph.addVertex("d", (0,1))
#        graph.addVertex("e", (1,1))
#        graph.addVertex("f", (2,1))
#        graph.addVertex("g", (0,0))
#        graph.addVertex("h", (1,0))
#        graph.addVertex("i", (2,0))
#        graph.addEdge("a", "b", 9)
#        graph.addEdge("b", "c", 3)
#        graph.addEdge("c", "f", 4)
#        graph.addEdge("e", "f", 3)
#        graph.addEdge("e", "d", 6)
#        graph.addEdge("d", "g", 1)
#        graph.addEdge("g", "h", 3)
#        graph.addEdge("h", "i", 8)
#        graph.addEdge("a", "d", 1)
#        graph.addEdge("e", "b", 3)
#        graph.addEdge("e", "h", 9)
#        graph.addEdge("f", "i", 6)
#        graph.addEdge("a", "e", 4)
#        graph.addEdge("c", "e", 5)
#        graph.addEdge("g", "e", 1)
#        graph.addEdge("i", "e", 4)
#        graph.addEdge("a", "c", 2, "bend left=60")
#        graph.addEdge("c", "i", 6, "bend left=60")
#        graph.addEdge("a", "g", 1, "bend right=60, swap")
#        graph.addEdge("g", "i", 5, "bend right=60, swap")
#        dijkstra = teachmedijkstra.Dijkstra(graph, "a")
#        dijkstra.run()
#        expectedShortestPathTree = set([('c', 'a'), ('e', 'b'), ('g', 'h'), ('i', 'g'), ('e', 'f'), ('g', 'e'), ('g', 'a'), ('d', 'a'), ('g', 'i'), ('h', 'g'), ('b', 'e'), ('a', 'c'), ('e', 'g'), ('a', 'd'), ('f', 'e'), ('a', 'g')])
#        self.assertEqual(dijkstra.shortestPathTree, expectedShortestPathTree)
#
#    def testDirectedNumOverwrites(self):
#        graph = teachmedijkstra.DirectedGraph()
#        graph.addVertex("a", (0,2))
#        graph.addVertex("b", (1,2))
#        graph.addVertex("c", (2,2))
#        graph.addVertex("d", (0,1))
#        graph.addVertex("e", (1,1))
#        graph.addVertex("f", (2,1))
#        graph.addVertex("g", (0,0))
#        graph.addVertex("h", (1,0))
#        graph.addVertex("i", (2,0))
#        graph.addEdge("a", "b", 9)
#        graph.addEdge("b", "c", 3)
#        graph.addEdge("c", "f", 4)
#        graph.addEdge("e", "f", 3)
#        graph.addEdge("e", "d", 6)
#        graph.addEdge("d", "g", 1)
#        graph.addEdge("g", "h", 3)
#        graph.addEdge("h", "i", 8)
#        graph.addEdge("a", "d", 1)
#        graph.addEdge("e", "b", 3)
#        graph.addEdge("e", "h", 9)
#        graph.addEdge("f", "i", 6)
#        graph.addEdge("a", "e", 4)
#        graph.addEdge("c", "e", 5)
#        graph.addEdge("g", "e", 1)
#        graph.addEdge("i", "e", 4)
#        graph.addEdge("a", "c", 2, "bend left=60")
#        graph.addEdge("c", "i", 6, "bend left=60")
#        graph.addEdge("a", "g", 1, "bend right=60, swap")
#        graph.addEdge("g", "i", 5, "bend right=60, swap")
#        dijkstra = teachmedijkstra.Dijkstra(graph, "a")
#        dijkstra.run()
#        self.assertEqual(dijkstra.numOverwrites, 3)
#
#    def testDirectedMaxOverwrites(self):
#        graph = teachmedijkstra.DirectedGraph()
#        graph.addVertex("a", (0,2))
#        graph.addVertex("b", (1,2))
#        graph.addVertex("c", (2,2))
#        graph.addVertex("d", (0,1))
#        graph.addVertex("e", (1,1))
#        graph.addVertex("f", (2,1))
#        graph.addVertex("g", (0,0))
#        graph.addVertex("h", (1,0))
#        graph.addVertex("i", (2,0))
#        graph.addEdge("a", "b", 9)
#        graph.addEdge("b", "c", 3)
#        graph.addEdge("c", "f", 4)
#        graph.addEdge("e", "f", 3)
#        graph.addEdge("e", "d", 6)
#        graph.addEdge("d", "g", 1)
#        graph.addEdge("g", "h", 3)
#        graph.addEdge("h", "i", 8)
#        graph.addEdge("a", "d", 1)
#        graph.addEdge("e", "b", 3)
#        graph.addEdge("e", "h", 9)
#        graph.addEdge("f", "i", 6)
#        graph.addEdge("a", "e", 4)
#        graph.addEdge("c", "e", 5)
#        graph.addEdge("g", "e", 1)
#        graph.addEdge("i", "e", 4)
#        graph.addEdge("a", "c", 2, "bend left=60")
#        graph.addEdge("c", "i", 6, "bend left=60")
#        graph.addEdge("a", "g", 1, "bend right=60, swap")
#        graph.addEdge("g", "i", 5, "bend right=60, swap")
#        dijkstra = teachmedijkstra.Dijkstra(graph, "a")
#        dijkstra.run()
#        self.assertEqual(dijkstra.maxOverwrites, 12)
#
#    def testUndirectedShortestPathTree(self):
#        graph = teachmedijkstra.UndirectedGraph()
#        graph.addVertex("a", (0,2))
#        graph.addVertex("b", (1,2))
#        graph.addVertex("c", (2,2))
#        graph.addVertex("d", (0,1))
#        graph.addVertex("e", (1,1))
#        graph.addVertex("f", (2,1))
#        graph.addVertex("g", (0,0))
#        graph.addVertex("h", (1,0))
#        graph.addVertex("i", (2,0))
#        graph.addEdge("a", "b", 9)
#        graph.addEdge("b", "c", 3)
#        graph.addEdge("c", "f", 4)
#        graph.addEdge("e", "f", 3)
#        graph.addEdge("e", "d", 6)
#        graph.addEdge("d", "g", 1)
#        graph.addEdge("g", "h", 3)
#        graph.addEdge("h", "i", 8)
#        graph.addEdge("a", "d", 1)
#        graph.addEdge("e", "b", 3)
#        graph.addEdge("e", "h", 9)
#        graph.addEdge("f", "i", 6)
#        graph.addEdge("a", "e", 4)
#        graph.addEdge("c", "e", 5)
#        graph.addEdge("g", "e", 1)
#        graph.addEdge("i", "e", 4)
#        graph.addEdge("a", "c", 2, "bend left=60")
#        graph.addEdge("c", "i", 6, "bend left=60")
#        graph.addEdge("a", "g", 1, "bend right=60, swap")
#        graph.addEdge("g", "i", 5, "bend right=60, swap")
#        dijkstra = teachmedijkstra.Dijkstra(graph, "a")
#        dijkstra.run()
#        expectedShortestPathTree = set([('g', 'e'), ('e', 'g'), ('c', 'a'), ('d', 'a'), ('c', 'b'), ('a', 'g'), ('h', 'g'), ('g', 'i'), ('e', 'f'), ('g', 'a'), ('i', 'g'), ('f', 'e'), ('a', 'c'), ('b', 'c'), ('g', 'h'), ('a', 'd')])
#        self.assertEqual(dijkstra.shortestPathTree, expectedShortestPathTree)
#
#    def testUndirectedNumOverwrites(self):
#        graph = teachmedijkstra.UndirectedGraph()
#        graph.addVertex("a", (0,2))
#        graph.addVertex("b", (1,2))
#        graph.addVertex("c", (2,2))
#        graph.addVertex("d", (0,1))
#        graph.addVertex("e", (1,1))
#        graph.addVertex("f", (2,1))
#        graph.addVertex("g", (0,0))
#        graph.addVertex("h", (1,0))
#        graph.addVertex("i", (2,0))
#        graph.addEdge("a", "b", 9)
#        graph.addEdge("b", "c", 3)
#        graph.addEdge("c", "f", 4)
#        graph.addEdge("e", "f", 3)
#        graph.addEdge("e", "d", 6)
#        graph.addEdge("d", "g", 1)
#        graph.addEdge("g", "h", 3)
#        graph.addEdge("h", "i", 8)
#        graph.addEdge("a", "d", 1)
#        graph.addEdge("e", "b", 3)
#        graph.addEdge("e", "h", 9)
#        graph.addEdge("f", "i", 6)
#        graph.addEdge("a", "e", 4)
#        graph.addEdge("c", "e", 5)
#        graph.addEdge("g", "e", 1)
#        graph.addEdge("i", "e", 4)
#        graph.addEdge("a", "c", 2, "bend left=60")
#        graph.addEdge("c", "i", 6, "bend left=60")
#        graph.addEdge("a", "g", 1, "bend right=60, swap")
#        graph.addEdge("g", "i", 5, "bend right=60, swap")
#        dijkstra = teachmedijkstra.Dijkstra(graph, "a")
#        dijkstra.run()
#        self.assertEqual(dijkstra.numOverwrites, 3)
#
#    def testUndirectedMaxOverwrites(self):
#        graph = teachmedijkstra.UndirectedGraph()
#        graph.addVertex("a", (0,2))
#        graph.addVertex("b", (1,2))
#        graph.addVertex("c", (2,2))
#        graph.addVertex("d", (0,1))
#        graph.addVertex("e", (1,1))
#        graph.addVertex("f", (2,1))
#        graph.addVertex("g", (0,0))
#        graph.addVertex("h", (1,0))
#        graph.addVertex("i", (2,0))
#        graph.addEdge("a", "b", 9)
#        graph.addEdge("b", "c", 3)
#        graph.addEdge("c", "f", 4)
#        graph.addEdge("e", "f", 3)
#        graph.addEdge("e", "d", 6)
#        graph.addEdge("d", "g", 1)
#        graph.addEdge("g", "h", 3)
#        graph.addEdge("h", "i", 8)
#        graph.addEdge("a", "d", 1)
#        graph.addEdge("e", "b", 3)
#        graph.addEdge("e", "h", 9)
#        graph.addEdge("f", "i", 6)
#        graph.addEdge("a", "e", 4)
#        graph.addEdge("c", "e", 5)
#        graph.addEdge("g", "e", 1)
#        graph.addEdge("i", "e", 4)
#        graph.addEdge("a", "c", 2, "bend left=60")
#        graph.addEdge("c", "i", 6, "bend left=60")
#        graph.addEdge("a", "g", 1, "bend right=60, swap")
#        graph.addEdge("g", "i", 5, "bend right=60, swap")
#        dijkstra = teachmedijkstra.Dijkstra(graph, "a")
#        dijkstra.run()
#        self.assertEqual(dijkstra.maxOverwrites, 12)

if __name__ == '__main__':
    unittest.main()

